OpenShift - Notes & Labs
========================
	The following assumptions are made for all the labs below:
		user:        developer
		password:    developer
		base_domain: example.com
		cluster:     ocp4
	Therefore, the default api and wildcard domain would be:
		API                      - https://api.ocp4.example.com:6443
		Ingress(Wildcard Domain) - *.apps.ocp4.example.com
	
	If you are using a shared openshift cluster, you might want to rename project one and two to a more unique name, such as <USERNAME>-one and <USERNAME>-two.
	
        LAB 1 - S2I using DC
        --------------------
        oc login -u developer -p developer https://apis.ocp4.example.com:6443
        oc whoami             # To Logout: oc logout

        oc new-project one
        oc projects
        oc project
        oc new-project two
        oc projects
        oc project
        oc get projects
        oc project one
        oc new-app --as-deployment-config https://github.com/kelvinlnx/test-php
        # READ EVERYTHING DISPLAYED BY THE oc new-app command
        oc logs bc/test-php
        oc status
        oc get all
        oc get dc,rc,pods,is,bc,build
        oc start-build test-php
        oc get dc,rc,bc,build,pods
        oc get is
        oc describe is test-php
        oc get svc
        oc expose svc test-php
        oc get route		# notice the address format <ROUTE>-<PROJ>.apps.<CLUSTER>.<BASE_DOMAIN>
        curl test-php-one.apps.ocp4.example.com
        oc expose svc test-php --name whatever
        curl whatever-one.apps.ocp4.example.com

        LAB 2 - S2I using Deployment
        ----------------------------
        # Create Deployment, ReplicaSet resources and compare differences between proj one and two

        oc project two
        oc new-app --name two https://github.com/kelvinlnx/test-php
        oc logs -f bc/two
        oc status
        oc get all
        oc get deployment,rs,pods,is,bc,build
        oc start-build two
        oc get pods
        oc logs two-1-build 
        oc get deployment,rs,bc,build,pods
        oc get is
        oc describe is two
        oc get svc
        oc expose svc two
        oc get route
        curl two-two.apps.ocp4.example.com
        oc expose svc two --hostname www.two.apps.ocp4.example.com --name second
        curl www.two.apps.ocp4.example.com

        Lab 3
        -----
        # Look/learn about resouce definations

        oc project one
        oc get pods -o wide
        oc describe po <RUNNING-POD>
        oc get po <RUNNING-POD> -o json
        oc get po <RUNNING-POD> -o yaml
        oc edit po <RUNNING-POD>

        # REPEAT get, describe, edit above for rc, dc, svc, is, route, bc

        # TIPS: Always deal with the "parent" resource if available dc/deployment, rc/rs, pod
        Syntax:
            oc expose dc|deploy|rc|rs|po <RESOURCE_NAME> [--name <SERVICE_NAME>]
            oc expose svc <SVC_NAME> [--name <ROUTE_NAME>] [--hostname <URL>]
            oc scale dc|deploy|rc|rs <RESOURCE_NAME> --replicas=<NUMBER>
            
        oc get endpoints
        oc rsh <POD>
        oc port-forward <POD> <LOCAL_PORT>:<PODS_PORT>
        oc whoami --show-console
        
Service names used in PODs
=========================
2 Ways of using Service:
        1. ENVIRONMENT VAR
          <SERVICE_NAME>_SERVICE_HOST environment variable in pods. Service has to be created first.

        2. DNS
          <SERVICE_NAME>.<PROJECT_NAME>.svc.cluster.local FQDN name.


Route names created by OpenShift
===============================
        <ROUTE_NAME>-<PROJ_NAME>.<DOMAIN_WILDCARD>
        <DOMAIN_WILDCARD> = apps.<BASE_DOMAIN>

IMAGE MANAGEMENT
================
	skopeo copy|delete|inspect --creds <USER>:<PASS> [--format oci|v2s1|v2s2] [--src-tls-verify] [--dest-tls-verify] <LOCATION>...
	where,
	        <LOCATION> = location of image
	                   = containers-storage:<IMAGE>[:TAG]
	                   = docker://<REGISTRY>/<NAMESPACE>/<IMAGE>[:TAG]
	                   = oci:<PATH>
	                   = dir:<PATH>
	
	NOTES: When using podman build, you might want to specify the image format using the "--format docker" option. This uses image spec v2, schema 2. Default is oci image spec v1.0, this might cause problems with openshift trying to pull them image with signature errors.


Secrets & Config Maps
=====================
        Creating Secret/CM
        ------------------
                oc create secret/cm -h
                
                oc create secret generic <SECRET_NAME> \
                  [--from-literal <KEY>=<VALUE>]... \
                  [--from-file <KEY>=<FILE>]...
                
                oc create secret tls <SECRET_NAME> --cert <CERT_FILE> --key <KEY_FILE>
                
                oc create cm <CM_NAME> \
                  [--from-literal <KEY>=<VALUE>]... \
                  [--from-file <KEY>=<FILE>]...
        
        
        Updating Secret/CM
        ------------------
                oc extract secret/<SECRET_NAME> [--to <PATH> [--confirm]]
                oc set data <SECRET_NAME/CM_NAME> \
                  [--from-literal <KEY>=<VALUE>]... \
                  [--from-file <KEY>=<FILE>]...

        Using Secret/CM
        ---------------
                oc set env <DC/DEPLOYMENT> --from secret/<SECRET_NAME> [--prefix <PREFIX>]
                oc set volume <DC/DEPLOYMENT> --add --type {secret/configmap} \
                  [--secret-name <SECRET_NAME>] [--configmap-name <CM_NAME>] \
                  --mount-path <PATH>
        


        Example:
                oc create secret generic mysecret --from-literal user=albert --from-literal lang=en
                oc set env deploy/<DEPLOYMENT_NAME> --from secret/mysecret
                oc get pods
                # wait till new pods are rolled out
                oc get pods
                oc rsh <POD_NAME> env | egrep -i 'USER|LANG'
                # the variables in the secret are now environment variables in the pods

                oc create cm mycm --from-literal index.html='Hello World' --from-literal test.html='My Test Data'

                oc set volume deploy/<DEPLOYMENT_NAME> --add --configmap-name mycm --mount-path /var/www/html/
                oc get pods
                # wait for new rollout
                oc get pods
                oc rsh <POD_NAME> cat /var/www/html/index.html
                oc rsh <POD_NAME> cat /var/www/html/test.html

Chap 6
======
        Deploy App from Image/IS
        ------------------------
        oc new-app [--as-deployment-config] {[--docker-image] <IMAGE>}|<IS>

        Result => DC/DEPLOY -> RC/RS -> POD
                  [IS]
                  [SVC]

        Deploy App from Source Code
        ---------------------------
        oc new-app [--as-deployment-config] [-i <BUILDER_IS>[:<TAG>]] <URL>     # Attempt to use BUILDER_IS
        oc new-app [--as-deployment-config] <BUILDER_IS>~<URL>                  # Force usage of BUILDER_IS

        Result => DC/DEPLOY -> RC/RS -> POD
                  IS
                  SVC
                  BC -> BUILD

        Deploy App from Template
        ------------------------
        oc new-app --template <TEMPLATE> [-p <PARAM>=<VALUE>]...

        Common Options for all 3 above:
        -------------------------------
        [--name <NAME>] [-e <ENV>=<VALUE>]...

